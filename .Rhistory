x = indec$Mes[1:12]
indec$month = month.abb[indec$Mes]
######################################################
file_total = 'https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_aperturas.xls'
destfile_total = "indec_nacional_total.xls"
download.file(file_total, destfile_total, mode = "wb")
indec_total = read_excel('indec_nacional_total.xls')
indec_total = indec_total[8:52,]
n_col_total = ncol(indec_total) - 1
periodos_total = seq(as.Date("2017/1/1"), by = "month", length.out = n_col_total)
indec_total = data.frame(t(indec_total))
colnames(indec_total) = c(indec_total[1,])
row.names(indec_total) = 1:nrow(indec_total)
indec_total = indec_total[-1,]
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2, trimws )
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2,
function(x) as.numeric(as.character(x)))
indec_total$periodos = periodos_total
library(writexl)
write_xlsx(indec_total, 'indecnacional_total.xlsx' )
indec_total = read_excel('indecnacional_total.xlsx')
indec_total$year = year(indec_total$periodos)
indec_total$Mes = as.numeric(substr(indec_total$periodos, 6 , 7))
indec_total$periodos = as.Date(indec_total$periodos)
colnames(indec_total) = gsub(',', '',colnames(indec_total))
colnames(indec_total) = gsub('á', 'a',colnames(indec_total))
colnames(indec_total) = gsub('é', 'e',colnames(indec_total))
colnames(indec_total) = gsub('í', 'i',colnames(indec_total))
colnames(indec_total) = gsub('ó', 'o',colnames(indec_total))
colnames(indec_total) = gsub('ú', 'u',colnames(indec_total))
colnames(indec_total)[2] = 'Alimentos y bebidas'
variable_total = indec_total$Nivel_general
x = indec_total$Mes[1:12]
indec_total$month = month.abb[indec_total$Mes]
dfss <- mtcars
View(dfss)
Sys.setlocale("LC_TIME","Spanish") #para que los meses al abreviarlos no tengan un punto al final
library(datasets)
library(flexdashboard)
library(plotly)
library(crosstalk)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(shiny)
library(dplyr)
library(lubridate)
library(readxl)
library(highcharter)
library(rlang)
library(broom)
#
#
# substr(today(),3,4)
#
#
#
#
# file = paste0('https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_',substr(today(),6,7),'_',substr(today(),3,4), '.xls')
#
# destfile = "indec_nacional.xls"
#
# download.file(file, destfile, mode = "wb")
#
# indec = read_excel('indec_nacional.xls')
#
#
# indec = indec[9:21,]
#
# n_col = ncol(indec) - 1
#
#
# periodos = seq(as.Date("2017/1/1"), by = "month", length.out = n_col)
#
#
#
# indec = data.frame(t(indec))
#
# colnames(indec) = c(indec[1,])
#
# row.names(indec) = 1:nrow(indec)
#
# indec = indec[-1,]
#
# indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2, trimws )
#
#
#
#
# indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2,
#                             function(x) as.numeric(as.character(x)))
#
#
# indec$periodos = periodos
#
# library(writexl)
#
# write_xlsx(indec, 'indecnacional.xlsx' )
#
#
indec = read_excel('indecnacional.xlsx')
indec$year = year(indec$periodos)
indec$Mes = as.numeric(substr(indec$periodos, 6 , 7))
indec$periodos = as.Date(indec$periodos)
colnames(indec) = gsub(',', '',colnames(indec))
colnames(indec) = gsub('á', 'a',colnames(indec))
colnames(indec) = gsub('é', 'e',colnames(indec))
colnames(indec) = gsub('í', 'i',colnames(indec))
colnames(indec) = gsub('ó', 'o',colnames(indec))
colnames(indec) = gsub('ú', 'u',colnames(indec))
colnames(indec)[2] = 'Alimentos y bebidas'
colnames(indec)[5] = 'Vivienda Agua y Elec'
colnames(indec)[4] = 'Prendias y Calzado'
colnames(indec)[6] = 'Equip y Mant del Hogar'
variable = indec$Nivel_general
x = indec$Mes[1:12]
indec$month = month.abb[indec$Mes]
######################################################
file_total = 'https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_aperturas.xls'
destfile_total = "indec_nacional_total.xls"
download.file(file_total, destfile_total, mode = "wb")
indec_total = read_excel('indec_nacional_total.xls')
indec_total = indec_total[8:52,]
n_col_total = ncol(indec_total) - 1
periodos_total = seq(as.Date("2017/1/1"), by = "month", length.out = n_col_total)
indec_total = data.frame(t(indec_total))
colnames(indec_total) = c(indec_total[1,])
row.names(indec_total) = 1:nrow(indec_total)
indec_total = indec_total[-1,]
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2, trimws )
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2,
function(x) as.numeric(as.character(x)))
indec_total$periodos = periodos_total
library(writexl)
write_xlsx(indec_total, 'indecnacional_total.xlsx' )
indec_total = read_excel('indecnacional_total.xlsx')
indec_total$year = year(indec_total$periodos)
indec_total$Mes = as.numeric(substr(indec_total$periodos, 6 , 7))
indec_total$periodos = as.Date(indec_total$periodos)
colnames(indec_total) = gsub(',', '',colnames(indec_total))
colnames(indec_total) = gsub('á', 'a',colnames(indec_total))
colnames(indec_total) = gsub('é', 'e',colnames(indec_total))
colnames(indec_total) = gsub('í', 'i',colnames(indec_total))
colnames(indec_total) = gsub('ó', 'o',colnames(indec_total))
colnames(indec_total) = gsub('ú', 'u',colnames(indec_total))
colnames(indec_total)[2] = 'Alimentos y bebidas'
variable_total = indec_total$Nivel_general
x = indec_total$Mes[1:12]
indec_total$month = month.abb[indec_total$Mes]
Sys.setlocale("LC_TIME","Spanish") #para que los meses al abreviarlos no tengan un punto al final
library(datasets)
library(flexdashboard)
library(plotly)
library(crosstalk)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(shiny)
library(dplyr)
library(lubridate)
library(readxl)
library(highcharter)
library(rlang)
library(broom)
indec = read_excel('indecnacional.xlsx')
indec$year = year(indec$periodos)
indec$Mes = as.numeric(substr(indec$periodos, 6 , 7))
indec$periodos = as.Date(indec$periodos)
colnames(indec) = gsub(',', '',colnames(indec))
colnames(indec) = gsub('á', 'a',colnames(indec))
colnames(indec) = gsub('é', 'e',colnames(indec))
colnames(indec) = gsub('í', 'i',colnames(indec))
colnames(indec) = gsub('ó', 'o',colnames(indec))
colnames(indec) = gsub('ú', 'u',colnames(indec))
colnames(indec)[2] = 'Alimentos y bebidas'
colnames(indec)[5] = 'Vivienda Agua y Elec'
colnames(indec)[4] = 'Prendias y Calzado'
colnames(indec)[6] = 'Equip y Mant del Hogar'
variable = indec$Nivel_general
x = indec$Mes[1:12]
indec$month = month.abb[indec$Mes]
indec_total = read_excel('indecnacional_total.xlsx')
indec_total$year = year(indec_total$periodos)
indec_total$Mes = as.numeric(substr(indec_total$periodos, 6 , 7))
indec_total$periodos = as.Date(indec_total$periodos)
colnames(indec_total) = gsub(',', '',colnames(indec_total))
colnames(indec_total) = gsub('á', 'a',colnames(indec_total))
colnames(indec_total) = gsub('é', 'e',colnames(indec_total))
colnames(indec_total) = gsub('í', 'i',colnames(indec_total))
colnames(indec_total) = gsub('ó', 'o',colnames(indec_total))
colnames(indec_total) = gsub('ú', 'u',colnames(indec_total))
colnames(indec_total)[2] = 'Alimentos y bebidas'
variable_total = indec_total$Nivel_general
x = indec_total$Mes[1:12]
indec_total$month = month.abb[indec_total$Mes]
deframe(indec[,c('Frutas')])
deframe(indec[,c('Salud')])
var <- 'Salud'
!!sym(xvar)
var <- 'Salud'
!!sym(var)
!!sym(var)
var <- 'Salud'
x = !!sym(var)
var <- 'Salud'
x = sym(var)
x
Sys.setlocale("LC_TIME","Spanish") #para que los meses al abreviarlos no tengan un punto al final
library(datasets)
library(flexdashboard)
library(plotly)
library(crosstalk)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(shiny)
library(dplyr)
library(lubridate)
library(readxl)
library(highcharter)
library(rlang)
library(broom)
indec = read_excel('indecnacional.xlsx')
indec$year = year(indec$periodos)
indec$Mes = as.numeric(substr(indec$periodos, 6 , 7))
indec$periodos = as.Date(indec$periodos)
colnames(indec) = gsub(',', '',colnames(indec))
colnames(indec) = gsub('á', 'a',colnames(indec))
colnames(indec) = gsub('é', 'e',colnames(indec))
colnames(indec) = gsub('í', 'i',colnames(indec))
colnames(indec) = gsub('ó', 'o',colnames(indec))
colnames(indec) = gsub('ú', 'u',colnames(indec))
colnames(indec)[2] = 'Alimentos y bebidas'
colnames(indec)[5] = 'Vivienda Agua y Elec'
colnames(indec)[4] = 'Prendias y Calzado'
colnames(indec)[6] = 'Equip y Mant del Hogar'
variable = indec$Nivel_general
x = indec$Mes[1:12]
indec$month = month.abb[indec$Mes]
indec_total = read_excel('indecnacional_total.xlsx')
indec_total$year = year(indec_total$periodos)
indec_total$Mes = as.numeric(substr(indec_total$periodos, 6 , 7))
indec_total$periodos = as.Date(indec_total$periodos)
colnames(indec_total) = gsub(',', '',colnames(indec_total))
colnames(indec_total) = gsub('á', 'a',colnames(indec_total))
colnames(indec_total) = gsub('é', 'e',colnames(indec_total))
colnames(indec_total) = gsub('í', 'i',colnames(indec_total))
colnames(indec_total) = gsub('ó', 'o',colnames(indec_total))
colnames(indec_total) = gsub('ú', 'u',colnames(indec_total))
colnames(indec_total)[2] = 'Alimentos y bebidas'
variable_total = indec_total$Nivel_general
x = indec_total$Mes[1:12]
indec_total$month = month.abb[indec_total$Mes]
colnames(indec)
colnames(indec)[1:10]
colnames(indec)[1:13]
nombres = colnames(indec)[1:13]
indec[,nrow(indec)]
indec[,nrow(indec)]
indec[nrow(indec),]
indec[nrow(indec),]
nrow(indec)
a =indec[nrow(indec),]
View(a)
a = indec[nrow(indec),]$values
a
subset(indec, indec[nrow(indec),])
df_pie = indec[nrow(indec),]
df_pie
df_pie = indec[nrow(indec),]
df_pie
names(df_pie)
values(df_pie)
value(df_pie)
as.numeric(df_pie)
df_pie = indec[nrow(indec),]
pie_chart_follow = df %>% hchart('pie', hcaes(x = colnames(df_pie)[1:13], y = as.numeric(df_pie)[1:13], color = viridis::mako(n = length(colnames(df_pie)[1:13])))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
df_pie = indec[nrow(indec),]
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = colnames(df_pie)[1:13], y = as.numeric(df_pie)[1:13], color = viridis::mako(n = length(colnames(df_pie)[1:13])))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
colnames(df_pie)[1:13]
as.numeric(df_pie)[1:13]
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = colnames(df_pie)[1:13], y = as.numeric(df_pie)[1:13], color = viridis::mako(n = length(colnames(df_pie)[1:13])))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
x = colnames(df_pie)[1:13]
y = as.numeric(df_pie)[1:13]
x
y
View(indec)
as.numeric(df_pie)[1:13]
tail(df_pie, n = 1)
tail(df_pie, n = 0)
tail(df_pie, n = 1)
df_pie = indec[nrow(indec),]
x = colnames(df_pie)[1:13]
y = tail(df_pie, n = 1)
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = x, y = y, color = viridis::mako(n = length(colnames(df_pie)[1:13])))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
unique(x)
df_pie = indec[nrow(indec),]
x = colnames(df_pie)[1:13]
y = tail(df_pie, n = 1)
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = x, y = y, color = viridis::mako(n = length(unique(x))))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
y = as.numeric(tail(df_pie, n = 1))
df_pie = indec[nrow(indec),]
x = colnames(df_pie)[1:13]
y = as.numeric(tail(df_pie, n = 1))[1:13]
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = x, y = y, color = viridis::mako(n = length(unique(x))))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
df_pie = indec[nrow(indec),]
x = colnames(df_pie)[1:13]
y = as.numeric(tail(df_pie, n = 1))[1:13]
pie_chart_follow = df_pie %>% hchart('pie', hcaes(x = x, y = y, color = viridis::mako(n = length(unique(x))))) %>%
hc_add_theme(hc_theme_google()) %>%
hc_tooltip(pointFormat = '<b> Total</b>  {point.y}') %>%
hc_title(text = 'Pie Chart Levels',
style = list(fontSize = '20px', fontWeight = 'bold')) %>%
hc_subtitle(text = '<b>Contenido por Niveles</b>',
style = list(fontSize = '16px', color = "black")) %>%
hc_credits(enabled = TRUE, text = "Fuente: Study Portals",align = "right",verticalAlign = "bottom",
style = list(color = "black", fontSize = '15px'),
href = " https://studyportals.com/")
library(datasets)
library(flexdashboard)
library(plotly)
library(crosstalk)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidymodels)
library(shiny)
library(dplyr)
library(lubridate)
library(readxl)
library(highcharter)
library(rlang)
library(broom)
library(writexl)
substr(today(),3,4)
file = paste0('https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_',substr(today(),6,7),'_',substr(today(),3,4), '.xls')
destfile = "indec_nacional.xls"
file
destfile = "indec_nacionals.xls"
download.file(file, destfile, mode = "wb")
today()
substr(today(),3,4)
substr(today(),6,7)
as.numeric(substr(today(),6,7))
if (as.numeric(substr(today(),6,7)) > 15){
file = paste0('https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_',substr(today(),6,7),'_',substr(today(),3,4), '.xls')
destfile = "indec_nacional.xls"
#download.file(file, destfile, mode = "wb")
indec = read_excel('indec_nacional.xls')
indec = indec[9:21,]
n_col = ncol(indec) - 1
periodos = seq(as.Date("2017/1/1"), by = "month", length.out = n_col)
indec = data.frame(t(indec))
colnames(indec) = c(indec[1,])
row.names(indec) = 1:nrow(indec)
indec = indec[-1,]
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2, trimws )
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2,
function(x) as.numeric(as.character(x)))
indec$periodos = periodos
#write_xlsx(indec, 'indecnacional.xlsx' )
######################################################
file_total = 'https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_aperturas.xls'
destfile_total = "indec_nacional_total.xls"
download.file(file_total, destfile_total, mode = "wb")
indec_total = read_excel('indec_nacional_total.xls')
indec_total = indec_total[8:52,]
n_col_total = ncol(indec_total) - 1
periodos_total = seq(as.Date("2017/1/1"), by = "month", length.out = n_col_total)
indec_total = data.frame(t(indec_total))
colnames(indec_total) = c(indec_total[1,])
row.names(indec_total) = 1:nrow(indec_total)
indec_total = indec_total[-1,]
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2, trimws )
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2,
function(x) as.numeric(as.character(x)))
indec_total$periodos = periodos_total
#write_xlsx(indec_total, 'indecnacional_total.xlsx' )
} else {
print( 15 - as.numeric(substr(today(),6,7)))
}
if (as.numeric(substr(today(),6,7)) > 15){
file = paste0('https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_',substr(today(),6,7),'_',substr(today(),3,4), '.xls')
destfile = "indec_nacional.xls"
download.file(file, destfile, mode = "wb")
indec = read_excel('indec_nacional.xls')
indec = indec[9:21,]
n_col = ncol(indec) - 1
periodos = seq(as.Date("2017/1/1"), by = "month", length.out = n_col)
indec = data.frame(t(indec))
colnames(indec) = c(indec[1,])
row.names(indec) = 1:nrow(indec)
indec = indec[-1,]
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2, trimws )
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2,
function(x) as.numeric(as.character(x)))
indec$periodos = periodos
write_xlsx(indec, 'indecnacional.xlsx' )
######################################################
file_total = 'https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_aperturas.xls'
destfile_total = "indec_nacional_total.xls"
download.file(file_total, destfile_total, mode = "wb")
indec_total = read_excel('indec_nacional_total.xls')
indec_total = indec_total[8:52,]
n_col_total = ncol(indec_total) - 1
periodos_total = seq(as.Date("2017/1/1"), by = "month", length.out = n_col_total)
indec_total = data.frame(t(indec_total))
colnames(indec_total) = c(indec_total[1,])
row.names(indec_total) = 1:nrow(indec_total)
indec_total = indec_total[-1,]
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2, trimws )
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2,
function(x) as.numeric(as.character(x)))
indec_total$periodos = periodos_total
write_xlsx(indec_total, 'indecnacional_total.xlsx' )
} else {
print('Faltan: ', 15 - as.numeric(substr(today(),6,7)), ' dias')
}
if (as.numeric(substr(today(),6,7)) > 15){
file = paste0('https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_',substr(today(),6,7),'_',substr(today(),3,4), '.xls')
destfile = "indec_nacional.xls"
download.file(file, destfile, mode = "wb")
indec = read_excel('indec_nacional.xls')
indec = indec[9:21,]
n_col = ncol(indec) - 1
periodos = seq(as.Date("2017/1/1"), by = "month", length.out = n_col)
indec = data.frame(t(indec))
colnames(indec) = c(indec[1,])
row.names(indec) = 1:nrow(indec)
indec = indec[-1,]
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2, trimws )
indec[ , c(1:(ncol(indec)))] = apply(indec[ , c(1:(ncol(indec)))], 2,
function(x) as.numeric(as.character(x)))
indec$periodos = periodos
write_xlsx(indec, 'indecnacional.xlsx' )
######################################################
file_total = 'https://www.indec.gob.ar/ftp/cuadros/economia/sh_ipc_aperturas.xls'
destfile_total = "indec_nacional_total.xls"
download.file(file_total, destfile_total, mode = "wb")
indec_total = read_excel('indec_nacional_total.xls')
indec_total = indec_total[8:52,]
n_col_total = ncol(indec_total) - 1
periodos_total = seq(as.Date("2017/1/1"), by = "month", length.out = n_col_total)
indec_total = data.frame(t(indec_total))
colnames(indec_total) = c(indec_total[1,])
row.names(indec_total) = 1:nrow(indec_total)
indec_total = indec_total[-1,]
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2, trimws )
indec_total[ , c(1:(ncol(indec_total)))] = apply(indec_total[ , c(1:(ncol(indec_total)))], 2,
function(x) as.numeric(as.character(x)))
indec_total$periodos = periodos_total
write_xlsx(indec_total, 'indecnacional_total.xlsx' )
} else {
cat('Faltan: ', 15 - as.numeric(substr(today(),6,7)), ' dias')
}
